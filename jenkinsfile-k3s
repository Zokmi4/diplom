pipeline {
    agent { label 'agent 2' }

    environment {
        DOCKER_IMAGE = 'zokmi4/diplom' // Имя вашего Docker образа
        HELM_RELEASE_NAME = 'diplom' // Имя Helm релиза
        DOCKER_TAG = 'latest' // Тег Docker образа
        KUBECONFIG = credentials('k3s') // Использование Jenkins credentials для kubeconfig
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Клонирование репозитория из ветки main
                git branch: 'main', credentialsId: '2', url: 'https://github.com/Zokmi4/diplom.git'
            }
        }

        stage('Check Helm Chart Directory') {
            steps {
                script {
                    // Проверка содержимого каталога
                    sh 'ls -R ./diplom'
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    // Логин в Docker Hub
                    withCredentials([usernamePassword(credentialsId: '3', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                        echo "Logging into Docker Hub"
                        docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
                        '''
                    }
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    // Скачиваем Docker образ из Docker Hub
                    echo "Pulling Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Delete Specific Pods') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'k3s', variable: 'KUBECONFIG_CONTENTS')]) {
                        echo "Deleting specific pods for release: ${HELM_RELEASE_NAME}"
                        sh '''
                        echo "$KUBECONFIG_CONTENTS" > kubeconfig
                        pod_name=$(kubectl get pods --kubeconfig=kubeconfig --selector=app=${HELM_RELEASE_NAME} -o jsonpath="{.items[0].metadata.name}")
                        kubectl delete pod ${pod_name} --kubeconfig=kubeconfig
                        '''
                    }
                }
            }
        }

        stage('Deploy to k3s') {
            steps {
                script {
                    // Проверка Helm-чарта перед деплоем
                    sh "helm lint ./diplom"

                    echo "Deploying ${HELM_RELEASE_NAME} with image ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh '''
                    echo "$KUBECONFIG_CONTENTS" > kubeconfig
                    helm upgrade --install ${HELM_RELEASE_NAME} './diplom' \
                        --set image.repository=${DOCKER_IMAGE} \
                        --set image.tag=${DOCKER_TAG} \
                        --kubeconfig kubeconfig
                    '''
                }
            }
        }

        stage('Update All Helm Charts') {
            steps {
                script {
                    // Обновление всех Helm Chart в указанном каталоге
                    def helmCharts = sh(script: "find . -name Chart.yaml -exec dirname {} \\;", returnStdout: true).trim().split("\n")
                    helmCharts.each { chart ->
                        echo "Updating Helm Chart in ${chart}"
                        sh '''
                        echo "$KUBECONFIG_CONTENTS" > kubeconfig
                        helm dependency update ${chart}
                        helm upgrade --install ${chart.split('/').last()} ${chart} --kubeconfig kubeconfig
                        '''
                    }
                }
            }
        }
    }
}
